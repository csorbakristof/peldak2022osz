@page "/addreview"
@inject HttpClient Http

<PageTitle>Add review</PageTitle>

<h1>Add review to question 1</h1>
<input type="text" @bind="@userID" @oninput="(e)=>userID=e.Value?.ToString()" />
<input type="text" @bind="@password" @oninput="(e)=>password=e.Value?.ToString()" />
<input type="text" @bind="@targetUserId" @oninput="(e)=>targetUserId=e.Value?.ToString()" />
<input type="text" @bind="@score" @oninput="(e)=>score=int.Parse(e.Value?.ToString())" />
<input type="text" @bind="@comment" @oninput="(e)=>comment=e.Value?.ToString()" />

@*<input type="text" @bind="@username" @oninput="OnInputEvent" />
*@
<button class="btn btn-primary" @onclick="Generate">Generate</button>
@code {
    private string userID = "CFRL1CG";
    private string password = "MDF2Q";
    private string targetUserId = "6BMZD9F";
    private int score = 3;
    private string comment = "comment";

    // See: https://stackoverflow.com/questions/57932850/how-to-make-two-way-binding-on-blazor-component

    //private void OnInputEvent(ChangeEventArgs changeEvent)
    //{
    //    username = (string?)changeEvent?.Value ?? "UNKNOWN";
    //}

    private async void Generate()
    {
        await Http.GetAsync($"AddReview?userID={userID}&password={password}&targetUserID={targetUserId}&score={score}&comment={comment}");
        StateHasChanged();
    }
}
